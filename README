Контекстный менеджер, который добавляет свои методы как функции в область видимости под with

Идея в том, чтобы контекстный менеджер модифицировал пространство имён между вызовами __enter__ и __exit__, добавляя туда новые имена и объекты.

Вот как это должно работать:
#здесь func не определена
with Context_func():
    #здесь func уже определена и её можно вызвать
    func()
#после выхода из контекста func опять не определена

# Шаблон для класса такого контекста
class Context:
    __all__ = ['func'] #здесь имя метода для переноса в глобальную область видимости
    def __enter__(self):
        #здесь те атрибуты класса которые есть в __all__ переносятся в глобальную область видимости
    def __exit__(self, *exp):
        # здесь восстанавливается та глобальная область видимости, что была до входа

Главное неудобство в необходимости явной передачи ссылки на словарь пространства имён. Поэтому вместо:
    
    with Context():
        func()

Приходится писать так:

    with Context(namespace=globals()):
        func()
